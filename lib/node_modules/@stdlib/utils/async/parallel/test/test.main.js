/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var parallel = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof parallel, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a function array', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		true,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[i] );
	}
	t.end();
	function badValue( value ) {
		return function badValue() {
			parallel( value, noop );
		};
	}
});

tape( 'the function throws an error if not provided a callback argument which is a function (no options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		true,
		void 0,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[i] );
	}
	t.end();
	function badValue( value ) {
		return function badValue() {
			parallel( [noop], value );
		};
	}
});

tape( 'the function throws an error if not provided a callback argument which is a function (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		true,
		void 0,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[i] );
	}
	t.end();
	function badValue( value ) {
		return function badValue() {
			parallel( [noop], {}, value );
		};
	}
});

tape( 'the function throws an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var i;

	function next( value, clbk ) {
		clbk( null, value );
	}

	function foo( resolve ) {
		resolve();
	}

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			parallel( [foo], value, next );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	function next( value, clbk ) {
		clbk( null, value );
	}

	function foo( resolve ) {
		resolve();
	}

	values = [
		'5',
		-5,
		3.14,
		0,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'limit': value
			};
			parallel( [foo], opts, next );
		};
	}
});
tape( 'The function invokes the provided functions once and return the results in order (asynchronous)', function test( t ) {
	var expected;

	function one( resolve ) {
		setTimeout( onTimeout, 100 );
		function onTimeout() {
			resolve( null, 1 );
		}
	}

	function two( resolve ) {
		setTimeout( onTimeout, 400 );
		function onTimeout() {
			resolve( null, 2 );
		}
	}

	function three( resolve ) {
		setTimeout( onTimeout, 200 );
		function onTimeout() {
			resolve( null, 3 );
		}
	}

	parallel( [one, two, three], done );

	expected = [
		1,
		2,
		3
	];

	function done( error, out ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'did not return an error' );
		}
		t.deepEqual( out, expected, 'returns expected output' );
		t.end();
	}
});

tape( 'The function invokes the provided functions once and return the results in order (synchronous)', function test( t ) {
	var expected;

	function one( resolve ) {
		resolve( null, 1 );
	}

	function two( resolve ) {
		resolve( null, 2 );
	}

	function three( resolve ) {
		resolve( null, 3 );
	}

	expected = [
		1,
		2,
		3
	];

	parallel( [one, two, three], done );

	function done( error, out ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'did not return an error' );
		}
		t.deepEqual( out, expected, 'returns expected output' );
		t.end();
	}
});

tape( 'the function supports specifying an execution context for the invoked function', function test( t ) {
	var opts;
	var ctx;

	function one( resolve ) {
		/* eslint-disable no-invalid-this */
		this.count += 1;
		setTimeout( onTimeout, 100 );
		function onTimeout() {
			resolve( null, 1 );
		}
	}

	function two( resolve ) {
		/* eslint-disable no-invalid-this */
		this.count += 1;
		setTimeout( onTimeout, 400 );
		function onTimeout() {
			resolve( null, 2 );
		}
	}

	function three( resolve ) {
		/* eslint-disable no-invalid-this */
		this.count += 1;
		setTimeout( onTimeout, 200 );
		function onTimeout() {
			resolve( null, 3 );
		}
	}

	ctx = {
		'count': 0
	};
	opts = {
		'thisArg': ctx
	};
	parallel( [one, two, three], opts, done );

	function done( error ) {
		t.strictEqual( ctx.count, 3, 'updated provided context' );
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'did not return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered while processing an object property, The function suspends execution and immediately returns the error (limit = 1)', function test( t ) {
	var count;
	var opts;
	count = 0;
	function one( resolve ) {
		setTimeout( onTimeout, 100 );
		function onTimeout() {
			count += 1;
			resolve( new Error( 'beep' ) );
		}
	}

	function two( resolve ) {
		setTimeout( onTimeout, 400 );
		function onTimeout() {
			count += 1;
			resolve( null, 2 );
		}
	}

	function three( resolve ) {
		setTimeout( onTimeout, 200 );
		function onTimeout() {
			count += 1;
			resolve( null, 3 );
		}
	}

	opts = {
		'limit': 1
	};
	parallel( [one, two, three], opts, done );

	function done( error ) {
		t.strictEqual( count, 1, 'suspends execution' );
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'did not return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered while processing an object property, The function suspends execution and immediately returns the error (concurrent; limit)', function test( t ) {
	var count;
	var opts;

	count = 0;
	function one( resolve ) {
		count += 1;
		setTimeout( onTimeout, 100 );
		function onTimeout() {
			resolve( new Error( 'beep' ) );
		}
	}

	function two( resolve ) {
		count += 1;
		setTimeout( onTimeout, 400 );
		function onTimeout() {
			resolve( new Error( 'beep' ) );
		}
	}

	function three( resolve ) {
		count += 1;
		setTimeout( onTimeout, 200 );
		function onTimeout() {
			resolve( null, 3 );
		}
	}

	opts = {
		'limit': 2
	};
	parallel( [one, two, three], opts, done );

	function done( error ) {
		t.strictEqual( count, 2, 'suspends execution' );
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'did not return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered while processing an object property, The function suspends execution and immediately returns the error (concurrent)', function test( t ) {
	var count;

	count = 0;
	function one( resolve ) {
		count += 1;
		setTimeout( onTimeout, 100 );
		function onTimeout() {
			resolve( new Error( 'beep' ) );
		}
	}

	function two( resolve ) {
		count += 1;
		setTimeout( onTimeout, 400 );
		function onTimeout() {
			resolve( new Error( 'beep' ) );
		}
	}

	function three( resolve ) {
		count += 1;
		setTimeout( onTimeout, 200 );
		function onTimeout() {
			resolve( new Error( 'beep' ) );
		}
	}

	parallel( [one, two, three], done );

	function done( error ) {
		t.strictEqual( count, 3, 'suspends execution' );
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'did not return an error' );
		}
		t.end();
	}
});
