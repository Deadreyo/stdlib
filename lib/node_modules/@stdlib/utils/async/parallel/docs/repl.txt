
{{alias}}( fcns, [options,] done )
    Executes functions in parallel, passing the results of
    all functions to a final callback.

    The first argument to each function is a `resolve` callback.
    The `resolve` callback should be invoked upon function completion.
    The first argument is reserved as an `error` argument
    (which can be `null` or void). If there is a result, it
    should be provided as the second argument to the `resolve`
    callback. Failure to invoke the `resolve` callback will
    prevent the `done` callback from being invoked.

    If any function calls the provided callback with a truthy `error` argument,
    the queued functions execution is suspended and immediately calls
    the completion callback for subsequent error handling.

    Execution is *not* guaranteed to be asynchronous. To ensure asynchrony, wrap
    the completion callback in a function which either executes at the end of
    the current stack (e.g., `nextTick`) or during a subsequent turn of the
    event loop (e.g., `setImmediate`, `setTimeout`).

    Parameters
    ----------
    fcns: Array<Function>
        Array of functions.

    options: Object (optional)
        Function options.

    options.limit: integer (optional)
        Maximum number of pending invocations. Default: Infinity.

    options.thisArg: any (optional)
        Execution context.

    done: Function
        Callback to invoke upon completion.

    Examples
    --------
    > function foo( next ) { next( null, 'beep' ); };
    > function bar( next ) { next( null, 'boop' ); };
    > function done( error ) { if ( error ) { throw error; } };
    > var fcns = [ foo, bar ];
    > {{alias}}( fcns, done );


{{alias}}.factory( fcns, [options,] done )
    Returns a reusable parallel function.

    Parameters
    ----------
    fcns: Array<Function>
        Array of functions.

    options: Object (optional)
        Function options.

    options.limit: integer (optional)
        Maximum number of pending invocations. Default: Infinity.

    options.thisArg: any (optional)
        Execution context.

    done: Function
        Callback to invoke upon completion.

    Returns
    -------
    fcn: Function
        Parallel function.

    Examples
    --------
    > function foo( next ) { next( null, 'beep' ); };
    > function bar( next ) { next( null, 'boop' ); };
    > function done( error ) { if ( error ) { throw error; } };
    > var fcns = [ foo, bar ];
    > var parallel = {{alias}}.factory( fcns, done );
    > parallel();
    > parallel();
    > parallel();

    See Also
    --------

